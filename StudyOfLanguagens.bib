---------------------------------------------------------    Basics   --------------------------------------------------------- 
Sintaxe: regras e estruturas usadas para escrever código, inclui a forma como as instruções são construídas, 
  a ordem dos elementos, a maneira como os valores são atribuídos,  partes importantes da sintaxe incluem a declaração de variáveis,
   a definição de funções, o uso de condicionais (como if/else), loops (como for e while), manipulação de arrays e objetos, entre outros.
  
  As instruções são construídas seguindo uma seintaxe que define como o código deve ser escrito para ser interpretado:
    Instruções Simples: geralmente terminam com um ponto e vírgula 
      (Atribuição de Variáveis, Impressão no Console, Operações Matemáticas, Estruturas de Controle de Fluxo,
        Chamadas de Funções, Declaração de Objetos e Propriedades, Manipulação de Arrays, Expressões e Operações Lógicas)

    Blocos de Códigos: são agrupamentos de instruções cercados por chaves,  são usados para agrupar múltiplas instruções em um único escopo,
      os blocos de código podem ser encontrados em várias partes do código.

    Declarações de Variáveis: usam var, let ou const, (Escopo de Variáveis, Bloqueio de Escopo, Bloqueio de Thread, Bloqueio de Variáveis em 
      Bancos de Dados).

    Estruturas de Controle de Fluxo: instruções (`if`, `else`, `else if`, `switch`, `for`, `while`,` do-while`).

    Declarações de Função: usam a palavra-chave `function` para definir uma função, que é um bloco de código nomeado que pode ser
      chamado e executado em qualquer lugar do programa, as declarações de função seguem uma sintaxe básica:

    Expressões: é uma combinação de valores, variáveis, operadores e chamadas de função que é avaliada para produzir um valor,
     podem ser simples quanto um único valor ou complexas quanto uma série de operações combinadas.
        (Expressões Aritméticas, Expressões de Strings, Expressões de Atribuição, Expressões Lógicas, Expressões de Chamadas de Função,
          Expressões de Objeto e Propriedade, Expressões de Array, Expressões Condicionais (Operador Ternário))

    Objetos e Propriedades: objetos são criados usando chaves `{}`, são uma estrutura de dados que permite armazenar dados e 
      funcionalidades relacionadas em um único local.

    Chamadas de função: utilizadas para executar o código contido em uma função definida.

Semântica: refere-se ao significado do código escrito, concentra em entender o comportamento e a lógica por trás do código, inclui 
  entender o que as diferentes instruções e estruturas fazem e como elas interagem umas com as outras.

                                                            --EX1!--
Atribuição 
    em JS pode ser definidas usando palavras const-chave, let, var, podendo fazer referência a valores diferentes ao longo do seu tempo,
    mecanismo fundamental para armazenar e manipular dados em um programa.
                                                            --EX1!--

                                                            --EX2!--    
Declarações de Função 
    são encapsuladas em funções, pertencendo a mesma função elas podem receber o parâmetro de (argumentos)
    retornando o valor usando a (return palavra-chave). São invocadas usando () sintaxe.
                                                            --EX2!--
    Expondo a outros arquivos
        paradisponibilizar uma function em outros arquivos, precisamos exportalas usando a (export palavra-chave),
        outro arquivo pode importá-los usando a (import palavra-chave) |sistemas de módulos|   
                                                          --EX2!CONT--

                                                            --EX3!--
Booleano 
    Representa um de dois valores: true ou false, sendo operadores lógicos ( !, &&, || ) usados com valores booleanos e 
    retornam um valor booleano.
    && AND(E): Retorna verdadeiro se ambos os operadores forem verdadeiros, se qualquer um for falso resulta falso.
    || OR(OU): Retorna verdadeiro se pelo menos um dos operandos for verdadeiro, se ambos forem falsos resultado sera falso.
    ! NOT(NÃO): Inverte o valor do operando, se for verdadeiro "not" retorna falso e se for falso "not" retorna verdadeiro.
                                                            --EX3!--

                                                            --EX4!-- 
Números
    Muitas linguagens, possuem tipos numéricos específicos para representar diferente tipos de números, mas o JS possui apenas dois:
        Number: tipo de dados numérico no formato de ponto flutuante de 64 bits (IEE 754).
          exemplos: -6, -2.4, 0, 0.1, 1, 3.14, 16.984025, 25.
        Bigint: tipo de dados numéricos que pode representar números inteiros no formato de precisão arbitrária.
          exemplos: -12n, 0, e 9007199254540991n.
            
        OBJETO GLOBAL INTEGRADO: !MATH! que fornece várias funções de arredondmento, arredondar
         para baixo (Math.floor) ou para cima (Math.ceil) números decimais para números inteiros, (Math.round) arredonda 
         para o número inteiro mais próximo, (Math.trunc) remove qualquer coisa após a vírgula sem arredondamento.                                                                                                                 
                                                            --EX4!--
Operadores aritméticos
  +  O operador de adição.
  -  O operador de subtração.
  *  O operador de multiplicação.
  /  O operador de divisão.
  &&  O operador resto é usado para encontrar o resto de uma divisão realizada.
  **  O operador de exponenciação é usado para elevar um número a uma potência. É o equivalente a usarMath.pow().
                                                                                                      Math.pow() método embutido 
                                                                                                    que retorna a base elevada à 
                                                                                                    potência do expoente. 
                                                                                                      Ele aceita dois argumentos: 
                                                                                                    a base e o expoente.
                                                          --EX4!CONT--

                                                            --EX5!--
Strings
  É o tipo de dados JS para armazenar dados de texto, pode ser tradada como uma lista de caracteres onde o primeiro caractere possui
  índice 0, podendo determinar o número de caracteres em uma string acessando a length  propriedade.

  Métodos auxiliares comumente usados
    toUpperCase: nova string com todos os caracteres em maiúsculas
    toLowerCase: nova string com todos os caracteres em minúsculas
    trim: usado para remover espaços em branco do início e do final de uma string
    includes: é usado para verificar se uma string contém outra string
    startsWith: usado para verificar se uma string começa com a sequência de caracteres especificada
    endsWith: usado para verificar se uma string termina com a sequência de caracteres especificada
    slice:  usado para extrair uma parte de uma string, retornando uma nova string
                                                            --EX5!--